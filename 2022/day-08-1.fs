S" day-08-input.txt" OPEN-BLOCKS

VARIABLE BLOCK-NUMBER   ( CURRENT, NOT NEXT, BLOCK NUMBER. )
VARIABLE BLOCK-START
VARIABLE BLOCK-POS

0 BLOCK-NUMBER !
0 BLOCK DUP BLOCK-START ! BLOCK-POS !

( IF AT THE END OF THE BLOCK, FETCH THE NEXT ONE. )
: ENSURE-BLOCK ( -- )
    BLOCK-POS @ BLOCK-START @ - 1024 =  ( END? )
    IF
	BLOCK-NUMBER @ 1+ DUP           ( NUM+1 NUM+1 )
	BLOCK DUP                       ( NUM+1 START START )
	BLOCK-START ! BLOCK-POS ! BLOCK-NUMBER !
    THEN
;

: PEEK-CHAR ( -- CHAR ) ENSURE-BLOCK BLOCK-POS @ C@ ;
: GET-CHAR ( -- CHAR )
    ENSURE-BLOCK
    BLOCK-POS DUP @ DUP C@ ( @POS POS CHAR )
    SWAP 1+ ROT !
;
: NOT-EOF? ( -- FLAG ) PEEK-CHAR 26 = 0= ;

( FETCH THE NEXT LINE OF INPUT, INCLUDING NEWLINE, INTO PAD.  )
( COPY CHARACTER-BY-CHARACTER TO HANDLE THE END OF THE BLOCK. )
( ASSUME NOT AT EOF.  RETURNS FALSE FOR BLANK LINES.          )
( THE COUNT NOT INCLUDING THE NEWLINE IS IN THE FIRST         )
( CHARACTER POSITION.                                         )
: GET-NEXT-LINE ( -- FLAG )
    PAD 1+                        ( DST )
    BEGIN
	GET-CHAR DUP 10 = 0=      ( DST CHAR NOT-CR? )
    WHILE
	    OVER C! 1+            ( DST+1 )
    REPEAT
    OVER C!  ( WRITE THE CR AS WELL )
    PAD 1+ - DUP  ( COUNT COUNT )
    PAD C! 0 >  ( STORE THE COUNT, RETURN THE FLAG )
;

( THESE NEED TO BE 5 AND 5 FOR THE TEST INPUT.                 )
( WE COULD SET THEM FROM THE FIRST LINE ASSUMING A SQUARE MAP. )
99 CONSTANT ROW-COUNT
99 CONSTANT COL-COUNT

VARIABLE INPUT-MAP

: READ-MAP ( -- )
    HERE ROW-COUNT COL-COUNT * ALLOT  ( ADDR )
    ROW-COUNT 0
    DO
	GET-NEXT-LINE DROP
	PAD 1+ SWAP  ( INPUT GRID )
	COL-COUNT 0
	DO
	    OVER I + C@                  ( INPUT GRID N )
	    OVER J ROW-COUNT * + I + C!  ( INPUT GRID )
	LOOP
	SWAP DROP
    LOOP
    INPUT-MAP !
;

VARIABLE VISIBLE-MAP

: INIT-VISIBLE-MAP ( -- )
    HERE ROW-COUNT COL-COUNT * ALLOT  ( ADDR )
    ROW-COUNT COL-COUNT * 0
    DO
	47 OVER I + C!  ( 47 IS ONE LESS THAN ASCII '0' )
    LOOP
    VISIBLE-MAP !
;

: MARK-TREE ( COL ROW -- )
    COL-COUNT * +  ( OFFSET )
    INPUT-MAP @ OVER + C@  ( OFFSET CHAR )
    VISIBLE-MAP @ ROT + C!
;

: GET-COORD ( ADDR COL ROW -- HEIGHT )
    COL-COUNT * + + C@
;

: BUILD-VISIBLE-MAP ( -- )
    ( THE CORNERS ARE ALWAYS VISIBLE, FILL THEM IN. )
    0 0 MARK-TREE
    COL-COUNT 1- 0 MARK-TREE
    0 ROW-COUNT 1- MARK-TREE
    COL-COUNT 1- ROW-COUNT 1- MARK-TREE

    ( NOW LOOK DOWN/UP EACH COLUMN EXCEPT THE FIRST AND LAST. )
    COL-COUNT 1- 1
    DO ( )
	I 0 MARK-TREE  ( THE NORTHERNMOST TREE IS VISIBLE. )
	INPUT-MAP @ I 0 GET-COORD  ( HEIGHT )
	( LOOK DOWN THE COLUMN. )
	ROW-COUNT 1- 1
	DO ( HEIGHT )
	    INPUT-MAP @ J I GET-COORD ( CURR-HEIGHT NEW-HEIGHT )
	    OVER OVER <  ( CURR-HEIGHT NEW-HEIGHT CURR-HEIGHT<NEW-HEIGHT )
	    IF
		( THIS TREE IS VISIBLE. )
		J I MARK-TREE
		( IF THE HEIGHT IS 9 WE CAN STOP, OTHERWISE ITS THE NEW HEIGHT. )
		DUP 57 =  ( ASCII '9' )
		IF LEAVE THEN
		SWAP DROP
	    ELSE
		( KEEP THE CURRENT HEIGHT. )
		DROP
	    THEN
	LOOP
	DROP

	I ROW-COUNT 1- MARK-TREE ( THE SOUTHERNMOST TREE IS VISIBLE. )
	INPUT-MAP @ I ROW-COUNT 1- GET-COORD  ( HEIGHT )
	( LOOK UP THE COLUMN. )
	0 ROW-COUNT 2 -
	DO ( HEIGHT )
	    INPUT-MAP @ J I GET-COORD
	    OVER OVER <
	    IF
		J I MARK-TREE
		DUP 57 =
		IF LEAVE THEN
		SWAP DROP
	    ELSE
		DROP
	    THEN
	-1 +LOOP
	DROP
    LOOP

    ( NOW LOOK ACROSS EACH ROW EXCEPT THE FIRST AND LAST. )
    ROW-COUNT 1- 1
    DO ( )
	0 I MARK-TREE  ( THE WESTERNMOST TREE IS VISIBLE. )
	INPUT-MAP @ 0 I GET-COORD  ( HEIGHT )
	( LOOK ACROSS THE ROW FROM THE LEFT. )
	COL-COUNT 1- 1
	DO ( HEIGHT )
	    INPUT-MAP @ I J GET-COORD
	    OVER OVER <
	    IF
		I J MARK-TREE
		DUP 57 =
		IF LEAVE THEN
		SWAP DROP
	    ELSE
		DROP
	    THEN
	LOOP
	DROP

	COL-COUNT 1- I MARK-TREE  ( THE EASTERNMOST TREE IS VISIBLE. )
	INPUT-MAP @ COL-COUNT 1- I GET-COORD  ( HEIGHT )
	( LOOK ACROSS THE ROW FROM THE RIGHT. )
	0 COL-COUNT 2 -
	DO ( HEIGHT )
	    INPUT-MAP @ I J GET-COORD
	    OVER OVER <
	    IF
		I J MARK-TREE
		DUP 57 =
		IF LEAVE THEN
		SWAP DROP
	    ELSE
		DROP
	    THEN
	-1 +LOOP
	DROP
    LOOP
;

: PRINT-MAP ( ADDR -- )
    CR
    ROW-COUNT 0
    DO
	DUP I COL-COUNT * +  ( ADDR ROW-ADDR )
	COL-COUNT TYPE CR
    LOOP
    DROP
;

: COUNT-VISIBLE-TREES ( -- N )
    VISIBLE-MAP @ 0  ( ADDR COUNT )
    ROW-COUNT 0
    DO
	COL-COUNT 0
	DO
	    OVER I J GET-COORD
	    47 >  ( ADDR COUNT HEIGHT>='0' )
	    IF 1+ THEN
	LOOP
    LOOP
    SWAP DROP
;

: RUN ( -- )
    READ-MAP
    INIT-VISIBLE-MAP
    BUILD-VISIBLE-MAP
    COUNT-VISIBLE-TREES
;

RUN . CR
BYE
